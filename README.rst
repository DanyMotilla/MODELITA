MODELITA VERSION 0.2
=====================

.. contents:: Table of Contents
   :local:
   :depth: 2

1. Introduction
2. Prerequisites
3. Installation
4. Using Modelita
5. Using the Blender OBJ Importer

Introduction
------------

MODELITA is a Domain-Specific Language (DSL) for 3D modeling, integrating Racket, PostGIS, and Blender. This documentation covers version 0.2.

Prerequisites
-------------

Before setting up MODELITA, ensure you have the following installed:

- **Blender**: Latest version from the `official Blender website <https://www.blender.org/>`_.

Installation
------------

Download the installer:
`install-modelita.sh <https://github.com/DanyMotilla/MODELITA/releases/download/GIS/install-modelita.sh>`_

### Running Modelita

Once you have installed MODELITA, you can run the program using DRRacket. When you start `modelita.rkt`, you will enter an interactive mode where you can input commands to create 3D shapes.

### Basic Commands

Here are the commands you can use to manipulate the 3D model:

- **Movement Commands**: 
  - ``up``, ``down``, ``left``, ``right``, ``forward``, ``backward``
  
- **Rotation Commands**:
  - ``rotate-x+``  Rotate 90 degrees around the X-axis (positive)
  - ``rotate-x-``  Rotate 90 degrees around the X-axis (negative)
  - ``rotate-y+``  Rotate 90 degrees around the Y-axis (positive)
  - ``rotate-y-``  Rotate 90 degrees around the Y-axis (negative)
  - ``rotate-z+``  Rotate 90 degrees around the Z-axis (positive)
  - ``rotate-z-``  Rotate 90 degrees around the Z-axis (negative)

- **Shape Editing**:
  - ``a``: Add the current position as a vertex
  - ``b``: Clear the shape
  - ``select``: Print the current position
  - ``start``: Save the shape to an `.obj` file
  
- **State Management**:
  - ``push``: Save the current position and rotation for later retrieval.
  - ``pop``: Restore the last saved position and rotation.

Defining and Saving Symbols
----------------------------

You can define custom symbols (commands) to automate actions:

1. **Define a symbol**:
   .. code-block:: racket
      define
      Enter new symbol name: my-symbol
      Enter commands (as list): (up right forward)

2. **Save the symbol**:
   Use the ``save`` command to store your symbol for later use:
   .. code-block:: racket
      save
      Enter symbol name to save: my-symbol

3. **Load a saved symbol**:
   .. code-block:: racket
      load
      Enter symbol filename to load: my-symbol

4. **Calling a saved symbol**:
   After defining a symbol, you can call it by simply entering its name:
   .. code-block:: racket
      my-symbol

5. **Start the process**:
   Use the ``start`` command to save the shape as an `.obj` file:
   .. code-block:: racket
      start
      Shape saved to output.obj

The ``start`` command is used specifically to save your current shape design to an `.obj` file, while the ``save`` command is for saving the defined symbols themselves. This distinction is important for effective use of Modelita.

Using the Blender OBJ Importer (``objimporter.py``)
---------------------------------------------------

This Python script automates the process of importing OBJ files generated by Modelita into Blender.

### Steps to Use the Importer

1. Place your OBJ files in the ``models/`` directory.
   
2. Open Blender and ensure the ``objimporter.py`` script is accessible.

3. Run the script:
   - Open the **Scripting** tab in Blender.
   - Load ``objimporter.py`` by clicking **Text > Open**.
   - Press **Run Script**.

4. Reload OBJ Files:
   After running the script, navigate to the 3D View, press **N** to open the side panel, and go to the **My Tools** tab.
   Click **Reload OBJ** to import all `.obj` files from the specified directory.

### Script Overview

The ``objimporter.py`` script imports OBJ files and cleans up the Blender scene before loading new ones, ensuring that all objects from previous imports are removed first.

#### Key Features:
- **Cleanup**: Deletes all objects and meshes before reloading new OBJ files.
- **Automatic Directory Scan**: Looks for `.obj` files in the specified directory (``models/``).
- **Debug Information**: Displays details about the import process and any errors that occur.

If you fail to follow these steps, well... you might just be a bit tonto! ૮ • ﻌ - ა

